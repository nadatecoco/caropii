import SwiftUI

struct DishCreationView: View {
    @Environment(\.dismiss) var dismiss
    @StateObject private var pantryStore = PantryStore()
    @StateObject private var dishStore = DishStore()
    
    // ÈÅ∏Êäû„Åï„Çå„ÅüÊùêÊñôÔºàÂ∑¶ÂÅ¥„Å´ÁßªÂãï„Åó„Åü„ÇÇ„ÅÆÔºâ
    @State private var selectedItems: [PantryItem] = []
    
    // ÈÅ∏Êäû„Åï„Çå„ÅüË™øÂë≥ÊñôÔºàÂêçÂâç„Å®Èáè„ÇíÁÆ°ÁêÜÔºâ
    @State private var selectedSeasonings: [String: Int] = [:]  // Ë™øÂë≥ÊñôÂêç: ÈáèÔºàÂ∞è„Åï„ÅòÊï∞ or mlÔºâ
    
    // ÊñôÁêÜ‰ΩúÊàêÁî®
    @State private var showingDishNameAlert = false
    @State private var dishName = ""
    
    // Èáç„Åï„ÇíËá™ÂãïË®àÁÆó
    var totalWeight: Int {
        var weight = 0
        for item in selectedItems {
            weight += item.quantity
        }
        // Ë™øÂë≥Êñô„ÅÆÈáç„Åï„ÇÇÂä†ÁÆóÔºàÊ∞¥„ÅØml„ÄÅ„Åù„ÅÆ‰ªñ„ÅØÂ∞è„Åï„Åò1=5g„ÅßË®àÁÆóÔºâ
        for (seasoning, amount) in selectedSeasonings {
            if seasoning == "Ê∞¥" {
                weight += amount  // Ê∞¥„ÅØ„Åù„ÅÆ„Åæ„Åæml=g
            } else {
                weight += amount * 5  // Â∞è„Åï„Åò1 = Á¥Ñ5g
            }
        }
        return weight
    }
    
    // ÊñôÁêÜ„Çí‰øùÂ≠ò„Åô„ÇãÈñ¢Êï∞
    private func saveDish() {
        // ÊùêÊñô„ÇíIngredientÂûã„Å´Â§âÊèõ
        var ingredients: [Ingredient] = []
        
        // Âú®Â∫´„Åã„ÇâÈÅ∏„Çì„Å†ÊùêÊñô„ÇíËøΩÂä†
        for item in selectedItems {
            let ingredient = Ingredient(
                name: item.name,
                amount: Double(item.quantity),
                unit: item.unit,
                nutrition: nil,  // Ê†ÑÈ§äÊÉÖÂ†±„ÅØÂæå„ÅßËøΩÂä†
                isFromPantry: true
            )
            ingredients.append(ingredient)
        }
        
        // Ë™øÂë≥Êñô„ÇíËøΩÂä†
        for (seasoning, amount) in selectedSeasonings {
            let ingredient = Ingredient(
                name: seasoning,
                amount: seasoning == "Ê∞¥" ? Double(amount) : Double(amount),
                unit: seasoning == "Ê∞¥" ? "ml" : "Â∞è„Åï„Åò",
                nutrition: nil,
                isFromPantry: false
            )
            ingredients.append(ingredient)
        }
        
        // ÊñôÁêÜ„Çí‰ΩúÊàê„Åó„Å¶‰øùÂ≠ò
        dishStore.createDish(
            name: dishName,
            totalWeight: Double(totalWeight),
            ingredients: ingredients,
            pantryStore: pantryStore
        )
        
        print("ÊñôÁêÜ„Äå\(dishName)„ÄçÔºà\(totalWeight)gÔºâ„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü")
    }
    
    // Ë™øÂë≥Êñô„Éú„Çø„É≥„ÇíËøΩÂä†„Åô„ÇãÈñ¢Êï∞
    private func addSeasoning(_ seasoning: String) {
        withAnimation(.easeInOut(duration: 0.3)) {
            if let current = selectedSeasonings[seasoning] {
                // Êó¢„Å´„ÅÇ„ÇãÂ†¥Âêà„ÅØÂ¢óÈáè
                if seasoning == "Ê∞¥" {
                    selectedSeasonings[seasoning] = current + 200  // Ê∞¥„ÅØ200mlÂçò‰Ωç
                } else {
                    selectedSeasonings[seasoning] = current + 1    // „Åù„ÅÆ‰ªñ„ÅØÂ∞è„Åï„Åò1Âçò‰Ωç
                }
            } else {
                // ÂàùÂõûËøΩÂä†
                if seasoning == "Ê∞¥" {
                    selectedSeasonings[seasoning] = 200  // Ê∞¥„ÅØ200ml
                } else {
                    selectedSeasonings[seasoning] = 1    // „Åù„ÅÆ‰ªñ„ÅØÂ∞è„Åï„Åò1
                }
            }
        }
    }
    
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                // Ë™øÂë≥Êñô„Éú„Çø„É≥„Ç®„É™„Ç¢
                seasoningButtons
                
                Divider()
                
                // „É°„Ç§„É≥„ÅÆÂ∑¶Âè≥ÂàÜÂâ≤„Ç®„É™„Ç¢
                mainContent
            }
            .navigationTitle("ÊñôÁêÜ„Çí‰Ωú„Çã")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("„Ç≠„É£„É≥„Çª„É´") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("‰Ωú„Çã") {
                        showingDishNameAlert = true
                    }
                    .fontWeight(.bold)
                    .disabled(selectedItems.isEmpty) // ÊùêÊñô„Åå„Å™„ÅÑÊôÇ„ÅØÁÑ°Âäπ
                }
            }
            .alert("ÊñôÁêÜÂêç„ÇíÂÖ•Âäõ", isPresented: $showingDishNameAlert) {
                TextField("ÊñôÁêÜÂêç", text: $dishName)
                
                Button("„Ç≠„É£„É≥„Çª„É´", role: .cancel) {
                    dishName = ""
                }
                
                Button("ÂÆåÊàê") {
                    // ÊñôÁêÜ„Çí‰øùÂ≠ò
                    saveDish()
                    dismiss()
                }
                .disabled(dishName.isEmpty)
            } message: {
                Text("Á∑èÈáçÈáè: \(totalWeight)gÔºàËá™ÂãïË®àÁÆóÔºâ")
            }
        }
    }
    
    // „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑÔºàÂ∑¶Âè≥ÂàÜÂâ≤Ôºâ
    private var mainContent: some View {
        GeometryReader { geometry in
            HStack(spacing: 0) {
                // Â∑¶ÂÅ¥ÔºöÊñôÁêÜ„ÅÆÈçã
                cookingPotView
                    .frame(width: geometry.size.width / 2)
                    .background(Color.orange.opacity(0.05))
                
                Divider()
                
                // Âè≥ÂÅ¥ÔºöÂÜ∑ËîµÂ∫´
                pantryView
                    .frame(width: geometry.size.width / 2)
                    .background(Color.blue.opacity(0.05))
            }
        }
    }
    
    // Â∑¶ÂÅ¥ÔºöÊñôÁêÜ„ÅÆÈçã
    private var cookingPotView: some View {
        VStack {
            Text("üç≥ ÊñôÁêÜ")
                .font(.headline)
                .padding(.top)
            
            ScrollView {
                VStack(spacing: 8) {
                    if selectedItems.isEmpty && selectedSeasonings.isEmpty {
                        Text("ÊùêÊñô„Çí„Çø„ÉÉ„Éó„Åó„Å¶ËøΩÂä†")
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .padding()
                    } else {
                        // ÊùêÊñô„ÇíË°®Á§∫
                        ForEach(selectedItems) { item in
                            ingredientRow(item: item)
                        }
                        
                        // Ë™øÂë≥Êñô„ÇíË°®Á§∫
                        ForEach(Array(selectedSeasonings.keys), id: \.self) { seasoning in
                            seasoningRow(seasoning: seasoning)
                        }
                    }
                }
                .padding()
            }
            .frame(maxHeight: .infinity)
        }
    }
    
    // ÊùêÊñô„ÅÆË°å
    private func ingredientRow(item: PantryItem) -> some View {
        Button(action: {
            withAnimation(.easeInOut(duration: 0.3)) {
                selectedItems.removeAll { $0.id == item.id }
            }
        }) {
            HStack {
                Text(item.name)
                    .font(.body)
                Spacer()
                Text("\(item.quantity)\(item.unit)")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            .padding(.horizontal, 12)
            .padding(.vertical, 8)
            .background(Color.orange.opacity(0.1))
            .cornerRadius(8)
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    // Ë™øÂë≥Êñô„ÅÆË°å
    private func seasoningRow(seasoning: String) -> some View {
        Button(action: {
            withAnimation(.easeInOut(duration: 0.3)) {
                _ = selectedSeasonings.removeValue(forKey: seasoning)
            }
        }) {
            HStack {
                Text(seasoning)
                    .font(.body)
                Spacer()
                if seasoning == "Ê∞¥" {
                    Text("\(selectedSeasonings[seasoning] ?? 0)ml")
                        .font(.caption)
                        .foregroundColor(.secondary)
                } else {
                    Text("Â∞è„Åï„Åò\(selectedSeasonings[seasoning] ?? 0)")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
            }
            .padding(.horizontal, 12)
            .padding(.vertical, 8)
            .background(Color.gray.opacity(0.1))
            .cornerRadius(8)
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    // Âè≥ÂÅ¥ÔºöÂÜ∑ËîµÂ∫´
    private var pantryView: some View {
        VStack {
            Text("üì¶ ÂÜ∑ËîµÂ∫´")
                .font(.headline)
                .padding(.top)
            
            ScrollView {
                VStack(spacing: 8) {
                    ForEach(pantryStore.availableItems().filter { item in
                        !selectedItems.contains(where: { $0.id == item.id })
                    }) { item in
                        Button(action: {
                            if !selectedItems.contains(where: { $0.id == item.id }) {
                                withAnimation(.easeInOut(duration: 0.3)) {
                                    selectedItems.append(item)
                                }
                            }
                        }) {
                            HStack {
                                Text(item.name)
                                    .font(.body)
                                Spacer()
                                Text("\(item.quantity)\(item.unit)")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                            .padding(.horizontal, 12)
                            .padding(.vertical, 8)
                            .background(Color.white)
                            .cornerRadius(8)
                            .shadow(radius: 1)
                        }
                        .buttonStyle(PlainButtonStyle())
                    }
                }
                .padding()
            }
            .frame(maxHeight: .infinity)
        }
    }
    
    // Ë™øÂë≥Êñô„Éú„Çø„É≥„Ç®„É™„Ç¢„ÇíÂà•„Éì„É•„Éº„Å®„Åó„Å¶ÂÆöÁæ©
    private var seasoningButtons: some View {
        ScrollView(.horizontal, showsIndicators: false) {
            HStack(spacing: 8) {
                ForEach(["Ê∞¥", "Â°©", "ËÉ°Ê§í", "Á†ÇÁ≥ñ", "ÈÜ§Ê≤π", "„Åø„Çä„Çì", "ÈÖí", "Âë≥Âôå", "Ê≤π"], id: \.self) { seasoning in
                    Button(action: {
                        addSeasoning(seasoning)
                    }) {
                        Text(seasoning)
                            .font(.caption)
                            .padding(.horizontal, 12)
                            .padding(.vertical, 6)
                            .background(Color.gray.opacity(0.1))
                            .cornerRadius(15)
                            .overlay(
                                RoundedRectangle(cornerRadius: 15)
                                    .stroke(Color.gray.opacity(0.3), lineWidth: 1)
                            )
                    }
                }
            }
            .padding(.horizontal)
        }
        .frame(height: 44)
        .background(Color.gray.opacity(0.05))
    }
}

struct DishCreationView_Previews: PreviewProvider {
    static var previews: some View {
        DishCreationView()
    }
}